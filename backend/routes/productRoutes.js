const express = require('express');
const router = express.Router();
const ProductModel = require('../models/Product');
const CategoryModel = require('../models/Category');

// üîπ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
router.get('/', async (req, res) => {
  try {
    const products = await ProductModel.find();
    res.json(products);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// üîπ –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const product = await ProductModel.findById(req.params.id);
    if (!product) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json(product);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

router.post('/:id/analogs', async (req, res) => {
  const { analogId } = req.body;

  try {
    const product = await ProductModel.findById(req.params.id).populate('analogs');
    const analog = await ProductModel.findById(analogId);

    if (!product || !analog) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –∏–ª–∏ –∞–Ω–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (product.category.toString() !== analog.category.toString()) {
      return res.status(400).json({ error: '–ê–Ω–∞–ª–æ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
    }


    // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–æ–≥ –≤ –æ–±–∞ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
    if (!product.analogs.includes(analogId)) {
      product.analogs.push(analogId);
      await product.save();
    }

    if (!analog.analogs.includes(product._id)) {
      analog.analogs.push(product._id);
      await analog.save();
    }

    res.json({ message: '–ê–Ω–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–æ–≥–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–æ–≥–∞' });
  }
});


// üîπ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–ª–∏ –∑–∞–∫—É–ø–∫—É
router.post('/', async (req, res) => {
  try {
    const {
      name,
      category,
      quantity,
      purchasePrice,
      seller,
      customFields,
      linkTo
    } = req.body;

    // –†—É—á–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É
    if (linkTo) {
      const targetProduct = await ProductModel.findById(linkTo);
      if (!targetProduct) {
        return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      targetProduct.purchases.push({
        seller,
        purchasePrice,
        purchaseDate: new Date()
      });

      targetProduct.quantity += quantity;

      if (customFields && typeof customFields === 'object') {
        targetProduct.customFields = {
          ...targetProduct.customFields,
          ...customFields
        };
      }

      const updated = await targetProduct.save();
      return res.status(200).json(updated);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    const categoryDoc = await CategoryModel.findById(category);
    if (!categoryDoc) {
      return res.status(400).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ
    let existingProduct = null;
    if (categoryDoc.mergeable) {
      existingProduct = await ProductModel.findOne({ name, category });
    }

    if (existingProduct) {
      existingProduct.purchases.push({
        seller,
        purchasePrice,
        purchaseDate: new Date()
      });

      existingProduct.quantity += quantity;

      if (customFields && typeof customFields === 'object') {
        existingProduct.customFields = {
          ...existingProduct.customFields,
          ...customFields
        };
      }

      const updatedProduct = await existingProduct.save();
      return res.status(200).json(updatedProduct);
    }

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
    const newProduct = new ProductModel({
      name,
      category,
      quantity,
      customFields,
      purchases: [
        {
          seller,
          purchasePrice,
          purchaseDate: new Date()
        }
      ]
    });

    const savedProduct = await newProduct.save();
    res.status(201).json(savedProduct);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// üîπ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
router.put('/:id', async (req, res) => {
  try {
    const updated = await ProductModel.findByIdAndUpdate(req.params.id, req.body, {
      new: true
    });
    if (!updated) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json(updated);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// üîπ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
router.delete('/:id', async (req, res) => {
  try {
    const deleted = await ProductModel.findByIdAndDelete(req.params.id);
    if (!deleted) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

router.delete('/:id/analogs/:analogId', async (req, res) => {
  const { id, analogId } = req.params;

  try {
    const product = await ProductModel.findById(id);
    const analog = await ProductModel.findById(analogId);

    if (!product || !analog) {
      return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –∏–ª–∏ –∞–Ω–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    product.analogs = product.analogs.filter(a => a.toString() !== analogId);
    analog.analogs = analog.analogs.filter(a => a.toString() !== id);

    await product.save();
    await analog.save();

    res.json({ message: '–ê–Ω–∞–ª–æ–≥ —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–æ–≥–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∞–ª–æ–≥–∞' });
  }
});


module.exports = router;
