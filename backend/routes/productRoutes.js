const express = require('express');
const router = express.Router();
const Product = require('../models/Product');
const Category = require('../models/Category');

// üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
router.get('/search', async (req, res) => {
  try {
    const { q } = req.query;
    if (!q || q.trim() === '') {
      return res.status(400).json({ error: '–ü–∞—Ä–∞–º–µ—Ç—Ä q –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }

    const regex = new RegExp(q, 'i');
    const products = await Product.find({ name: regex }).limit(10);
    res.json(products);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// üì¶ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
router.get('/', async (req, res) => {
  try {
    const products = await Product.find().sort({ createdAt: -1 });
    res.json(products);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π customFields –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è
router.post('/', async (req, res) => {
  try {
    const { name, category, quantity, purchasePrice, seller, customFields } = req.body;
    const product = new Product({ name, category, quantity, purchasePrice, seller, customFields});

    const categoryDoc = await Category.findById(category);
    if (!categoryDoc) {
      return res.status(400).json({ error: '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    if (categoryDoc.mergeable) {
      const existing = await Product.findOne({ name, category });

      if (existing) {
        const totalQty = existing.quantity + quantity;
        const avgPrice = ((existing.purchasePrice * existing.quantity) + (purchasePrice * quantity)) / totalQty;

        existing.quantity = totalQty;
        existing.purchasePrice = avgPrice;
        existing.customFields = customFields; // –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        await existing.save();

        return res.json({ message: '–¢–æ–≤–∞—Ä –æ–±—ä–µ–¥–∏–Ω—ë–Ω', product: existing });
      }
    }

    const saved = await product.save();
    res.status(201).json(saved);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// ‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
router.put('/:id', async (req, res) => {
  try {
    const updated = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json(updated);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

// ‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
router.delete('/:id', async (req, res) => {
  try {
    await Product.findByIdAndDelete(req.params.id);
    res.json({ message: '–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞' });
  }
});

module.exports = router;
